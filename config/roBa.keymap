#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        hankaku_zenkaku {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <32 33>;
        };

        and {
            bindings = <&kp CARET>;
            key-positions = <1 2>;
        };

        or {
            bindings = <&kp LS(INT_YEN)  >;
            key-positions = <2 3>;
        };

        capslock {
            bindings = <&kp LS(CAPSLOCK)>;
            key-positions = <10 22 34>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <5 6>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 20>;
        };

        underscore {
            bindings = <&kp LS(INT_RO)>;
            key-positions = <31 32>;
        };

        tilde {
            bindings = <&kp PLUS>;
            key-positions = <19 18>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        mkp_catia_scaling: mkp_catia_scaling {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mkp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mkp MACRO_PLACEHOLDER>;
        };

        mkp_catia_rotation: mkp_catia_rotation {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mkp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mkp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_release>,
                <&mkp MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                          &kp T                                           &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &lt 4 D       &kp F                          &kp G        &kp C_MUTE          &kp RC(W)      &kp H        &kp J  &kp K      &kp L    &lt 4 SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                          &kp B        &mo 6               &none          &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 2 INT_MUHENKAN  &lt 1 SPACE  &kp INT_HENKAN      &kp BACKSPACE  &lt 3 ENTER                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        SYMBOL {
            bindings = <
&trans            &trans            &trans            &trans            &trans                                &kp LEFT_BRACKET  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACKET  &kp BACKSLASH
&kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)  &trans      &trans  &kp INT_YEN       &kp HASH      &kp PERCENT           &kp MINUS          &kp SINGLE_QUOTE
&trans            &trans            &trans            &trans            &trans            &trans      &trans  &kp DOLLAR        &kp AT_SIGN   &kp AMPERSAND         &kp LS(INT_RO)     &kp INT_RO
&trans            &trans            &trans            &trans            &trans            &trans      &trans  &trans                                                                   &trans
            >;
        };

        NUM {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4        &kp F5                               &kp DOUBLE_QUOTES  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp COLON
&kp F6   &kp F7   &kp F8  &kp F9        &kp F10  &trans      &kp KP_NUMLOCK  &kp SLASH          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&kp F11  &kp F12  &trans  &kp LEFT_ALT  &trans   &trans      &kp UNDERSCORE  &kp KP_NUMBER_0    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &mt RIGHT_SHIFT EQUAL
&trans   &trans   &trans  &trans        &trans   &trans      &trans          &trans                                                                &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE             &kp LC(PAGE_UP)  &kp UP_ARROW      &kp LC(PAGE_DOWN)    &kp PAGE_UP                                         &kp PAGE_DOWN  &kp LC(LG(LEFT_ARROW))  &kp LG(UP_ARROW)    &kp LC(LG(RIGHT_ARROW))  &kp LC(LG(F4))
&kp HOME               &kp LEFT_ARROW   &kp DOWN_ARROW    &kp RIGHT_ARROW      &kp END            &trans            &trans         &trans         &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)      &kp LC(LG(D))
&kp LC(RIGHT_BRACKET)  &kp LA(LEFT)     &kp LA(UP_ARROW)  &kp LA(RIGHT_ARROW)  &kp LC(BACKSLASH)  &kp LEFT_ALT      &kp RIGHT_ALT  &trans         &kp LG(LS(LEFT_ARROW))  &trans              &kp LG(LS(RIGHT_ARROW))  &kp RIGHT_SHIFT
&trans                 &trans           &trans            &trans               &trans             &trans            &trans         &trans                                                                              &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans                       &trans  &trans    &trans                                          &trans  &trans    &trans    &trans    &trans
&trans  &mkp_catia_rotation MB3 MB2  &trans  &mkp MB3  &trans                      &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans                       &trans  &trans    &mkp_catia_scaling MB3 MB2  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans                       &trans  &trans    &trans                      &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
